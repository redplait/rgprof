// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lsmod
CharacterVector lsmod();
RcppExport SEXP _rgprof_lsmod() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(lsmod());
    return rcpp_result_gen;
END_RCPP
}
// lsmodf
DataFrame lsmodf();
RcppExport SEXP _rgprof_lsmodf() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(lsmodf());
    return rcpp_result_gen;
END_RCPP
}
// lsmodr
CharacterVector lsmodr(std::string& re);
RcppExport SEXP _rgprof_lsmodr(SEXP reSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type re(reSEXP);
    rcpp_result_gen = Rcpp::wrap(lsmodr(re));
    return rcpp_result_gen;
END_RCPP
}
// checkmod
int checkmod(std::string& fname);
RcppExport SEXP _rgprof_checkmod(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(checkmod(fname));
    return rcpp_result_gen;
END_RCPP
}
// control
void control(int v);
RcppExport SEXP _rgprof_control(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    control(v);
    return R_NilValue;
END_RCPP
}
// prof_stop
int prof_stop();
RcppExport SEXP _rgprof_prof_stop() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(prof_stop());
    return rcpp_result_gen;
END_RCPP
}
// prof_start
int prof_start(std::string fname);
RcppExport SEXP _rgprof_prof_start(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(prof_start(fname));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rgprof_lsmod", (DL_FUNC) &_rgprof_lsmod, 0},
    {"_rgprof_lsmodf", (DL_FUNC) &_rgprof_lsmodf, 0},
    {"_rgprof_lsmodr", (DL_FUNC) &_rgprof_lsmodr, 1},
    {"_rgprof_checkmod", (DL_FUNC) &_rgprof_checkmod, 1},
    {"_rgprof_control", (DL_FUNC) &_rgprof_control, 1},
    {"_rgprof_prof_stop", (DL_FUNC) &_rgprof_prof_stop, 0},
    {"_rgprof_prof_start", (DL_FUNC) &_rgprof_prof_start, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rgprof(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
